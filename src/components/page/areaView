<template>

  <div v-show="tabType == 0">
    <el-container>

      <el-aside width="240px" height="100% " style=" border: 1px solid #eee; padding: 10px; ">

        <el-button type="primary" icon="el-icon-plus" size="mini" @click=" addAreaFlag = true">添加展区</el-button>
        <el-button type="primary" icon="el-icon-plus" size="small"  @click=" addGroupFlag = true ">添加分组</el-button>

        <!-- <el-tree :data="treeData"  default-expand-all node-key="id" ref="tree" highlight-current :props="defaultProps" :render-content="renderContent"></el-tree>-->
        <el-collapse v-model="activeName" accordion>
          <el-collapse-item title="一致性 Consistency" name="1"></el-collapse-item>
        </el-collapse>
        <!--添加展区-->
        <el-dialog title="添加展区" :visible.sync="addAreaFlag" width="40%" :before-close="handleClose(addAreaFlag)">
          <el-form ref="form"  label-width="120px" >
            <el-form-item label="展区名称">
              <el-input v-model="areaName"></el-input>
            </el-form-item>
          </el-form>
          <span slot="footer" class="dialog-footer">
                <el-button type="success" @click="addArea()">添 加</el-button>
                <el-button type="primary" @click="addAreaFlag = false">取 消</el-button>
              </span>
        </el-dialog>
        <!--添加分组-->
        <el-dialog title="添加分组" :visible.sync="addGroupFlag" width="40%" :before-close="handleClose(addGroupFlag)">
          <el-form ref="form"  label-width="120px" >
            <el-form-item label="选择展区">
              <el-input v-model="groupName"></el-input>
            </el-form-item>
            <el-form-item label="分组名称">
              <el-input v-model="groupName"></el-input>
            </el-form-item>
          </el-form>
          <span slot="footer" class="dialog-footer">
                <el-button type="success" @click="addGroup()">添 加</el-button>
                <el-button type="primary" @click="addGroupFlag = false">取 消</el-button>
              </span>
        </el-dialog>

      </el-aside>
      <el-main>

      </el-main>
    </el-container>



  </div>



</template>

<script>


  export default {
    name: 'viewSelection',
    data() {
      return {
        tabType: 0,


        defaultProps: {
          children: 'children',
          label: 'label'
        },
        areaName:"",
        groupName:"",
        addAreaFlag:false,
        addGroupFlag:false,
        exhibitionAreaList:[],
        lineGroupList:[],
        treeData:[],

      }
    },
    mounted(){
      this.getTreeData();

    },
    methods: {
      //关闭按钮
      handleClose(flag) {
        if(flag == 'addAreaFlag'){
          this.addAreaFlag = false;
        }
        if(flag == 'addGroupFlag'){
          this.addGroupFlag = false;
        }

      },
      //点击选项卡
      handleClick(tab, e) {
        this.tabType = tab.index;
        var _val = tab.index;

      },
      getTreeData(){
        let _this = this;
        var arr =[];
        _this.axios({
          method:'get',
          url:window.config.url + "/stage/device/getExhibitionAreaDropDownList",
          headers: { "token": localStorage.getItem("token") }
        }).then(function(res){
          console.log(res);
          _this.treeData = res.data.data;
          console.log(_this.treeData);
        }).catch(function (error) {
          console.log(error);
        });
        _this.treeData = arr;

      },
      getTreeNodeData(){
        arr = res.data.data;
        //console.log(arr);
        arr.map(item=>{
          _this.axios({
            method: 'get',
            url:window.config.url + "/stage/device/getLineGroupDropDownList",
            params:{exhibitionAreaId:item.id},
            headers:{ "token":localStorage.getItem("token") }
          }).then((res)=>{

            item.children = res.data.data;
            console.log(arr);
          }).catch(function (error) {
            console.log(error);
          });
        });
      },

      addArea(){
        let _this = this;

        _this.axios({
          method: 'post',
          url:window.config.url + "/stage/exhibitionArea/addExhibitionArea",
          data:{name:this.areaName},
          headers:{ "token":localStorage.getItem("token") }
        }).then((res)=>{
          console.log(res);
          if(res.data.code == 200){
            _this.$message({
              message: "添加成功",
              type: 'success'
            });


          }else{
            _this.$message({
              message: res.data.msg,
              type: 'warning'
            });
          }
        }).catch(function (error) {
          console.log(error);
        });
      },
      addGroup(){
        let _this = this;

        _this.axios({
          method: 'post',
          url:window.config.url + "/stage/exhibitionArea/addLineGroup",
          data:{name:this.areaName},
          headers:{ "token":localStorage.getItem("token") }
        }).then((res)=>{
          console.log(res);
          if(res.data.code == 200){
            _this.$message({
              message: "添加成功",
              type: 'success'
            });


          }else{
            _this.$message({
              message: res.data.msg,
              type: 'warning'
            });
          }
        }).catch(function (error) {
          console.log(error);
        });
      },

      append(data) {
        const newChild = { id: id++, label: 'testtest', children: [] };
        if (!data.children) {
          this.$set(data, 'children', []);
        }
        data.children.push(newChild);
      },



      renderContent(h, { node, data, store }) {
        return (
          <span style="flex: 1; display: flex; align-items: center; justify-content: space-between; font-size: 14px; padding-right: 8px;">
          <span>
          <span>{node.label}</span>
          </span>
          <span>
          <el-button style="font-size: 12px;" icon="el-icon-circle-plus-outline" type="text" on-click={ () => this.append(data) } ></el-button>

        </span>
        </span>);
      }

    }
  };

  // <el-button style="font-size: 12px;" type="text" on-click={ () => this.remove(node, data) }>Delete</el-button>
</script>

<style scoped>
  .box-card {
    width: 400px;
    float: left;
    margin-bottom: 20px;
    margin-right:20px ;

  }
</style>
